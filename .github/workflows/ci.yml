name: CI
on:
  push:
    branches: [master, release-*]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
  pull_request:
  workflow_dispatch:
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      RID: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: win-x86
            param: -x86
          - os: windows-2019
            name: win-x64
            param: -x64
          - os: windows-2019
            name: win-arm64
            param: -arm64
          - os: ubuntu-20.04
            name: linux-x64
          - os: ubuntu-20.04
            name: linux-musl-x64
          - os: ubuntu-20.04
            name: linux-arm64
          - os: ubuntu-20.04
            name: linux-musl-arm
          - os: ubuntu-20.04
            name: linux-musl-arm64
          - os: ubuntu-20.04
            name: linux-arm
          - os: macos-10.15
            name: osx-x64
          - os: macos-11
            name: osx-arm64
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          submodules: true
      - name: Build Windows
        if: runner.os == 'Windows'
        run: ./build.libgit2.ps1 ${{ matrix.param }}
      - name: Build macOS
        if: runner.os == 'macOS'
        run: ./build.libgit2.sh
      - name: Setup QEMU
        run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
        if: matrix.name == 'linux-musl-arm' || matrix.name == 'linux-musl-arm64'
      - name: Build Linux
        if: runner.os == 'Linux'
        run: ./dockerbuild.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2.2.2
        with:
          name: ${{ matrix.name }}
          path: nuget.package/runtimes/${{ matrix.name }}
  package:
     name: Create package
     needs: build
     runs-on: windows-2019
     env:
       DOTNET_NOLOGO: true
     steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.x
      - name: Install MinVer
        run: dotnet tool install --global minver-cli
      - name: Run MinVer
        id: minver
        run: echo '::set-output name=version::$(minver)'
      - name: Download artifacts
        uses: actions/download-artifact@v2.0.10
        with:
          path: nuget.package/runtimes/
      - name: Create package
        run: ./nuget.exe Pack nuget.package/NativeBinaries.nuspec -Version ${{ steps.minver.outputs.version }} -NoPackageAnalysis 
      - name: Upload NuGet package
        uses: actions/upload-artifact@v2.2.2
        with:
          name: NuGet package
          path: ./*.nupkg
